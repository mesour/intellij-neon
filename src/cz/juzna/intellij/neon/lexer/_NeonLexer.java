/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cz.juzna.intellij.neon.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static cz.juzna.intellij.neon.lexer.NeonTokenTypes.*;

/**
 * @author Jan Dolecek
 * @author Jan TvrdÃ­k
 * @author Michael Moravec
 */

public class _NeonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DEFAULT = 2;
  public static final int IN_LITERAL = 4;
  public static final int VYINITIAL = 6;
  public static final int SINGLE_QUOTED = 8;
  public static final int DOUBLE_QUOTED = 10;
  public static final int STATIC_FIELD = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\6\200\200\300");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\137\2\100\5");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\17\1\16\1\12\3\13\22\17\1\16\1\23\1\25\1\11\1\22\1\36\1\22\1\24\1\26\1"+
    "\31\1\10\1\1\1\27\1\20\1\3\1\22\12\2\1\21\2\22\1\30\2\22\1\6\4\5\1\4\25\5"+
    "\1\34\1\7\1\35\1\22\1\5\1\23\4\5\1\4\25\5\1\32\1\22\1\33\1\22\6\0\1\14\32"+
    "\0\1\37\337\22\1\37\177\22\13\37\35\22\2\15\5\22\1\37\57\22\1\37\40\22\200"+
    "\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\2\3\1\4\3\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\3\1\24\2\1"+
    "\1\25\1\24\1\26\1\25\1\24\1\27\1\30\1\31"+
    "\1\0\1\3\1\4\2\3\1\0\1\3\5\0\1\32"+
    "\3\33\1\0\2\34\1\35\2\0\1\24\1\0\1\36"+
    "\2\0\1\25\2\3\1\4\1\0\1\4\1\37\1\0"+
    "\1\34\1\40\1\41\3\0\1\4\1\0\1\4\1\25"+
    "\1\0\1\25\2\4\2\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\140"+
    "\0\340\0\140\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0"+
    "\0\140\0\u01c0\0\u01e0\0\u0200\0\140\0\140\0\140\0\140"+
    "\0\140\0\140\0\140\0\140\0\140\0\140\0\u0220\0\u0240"+
    "\0\u0260\0\u0280\0\u02a0\0\u02c0\0\140\0\u02e0\0\u0300\0\140"+
    "\0\140\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0"+
    "\0\u03e0\0\u0400\0\u0420\0\u0140\0\u0440\0\u0460\0\140\0\140"+
    "\0\u0460\0\u0180\0\u0480\0\u04a0\0\u04c0\0\u04e0\0\u0500\0\u0520"+
    "\0\140\0\u0260\0\140\0\u02c0\0\u0300\0\u0540\0\u0560\0\u0580"+
    "\0\u05a0\0\u05c0\0\u05e0\0\140\0\u0600\0\u0620\0\u0640\0\140"+
    "\0\u0360\0\u0660\0\u0680\0\u06a0\0\u06c0\0\u06e0\0\u0700\0\u0720"+
    "\0\u0740\0\u0760\0\u0780\0\u0660\0\u0680";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\13\10\3\0\1\11\21\10\1\12\1\13\1\14\1\12"+
    "\2\15\1\16\1\17\1\12\1\20\1\11\1\21\2\12"+
    "\1\22\1\21\1\23\1\24\1\12\1\21\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\12\12\40\1\10\1\0\2\40\1\41\1\10"+
    "\1\40\1\42\4\40\4\10\1\40\1\10\1\40\1\10"+
    "\2\40\40\0\7\43\1\44\14\43\1\45\13\43\7\46"+
    "\1\47\15\46\1\50\12\46\4\51\2\52\3\51\3\0"+
    "\2\51\2\0\2\53\1\51\13\0\2\51\16\0\1\11"+
    "\23\0\1\14\35\0\1\12\1\54\1\55\1\56\1\57"+
    "\4\12\1\0\2\60\2\61\1\60\1\0\1\62\1\63"+
    "\1\12\13\0\1\12\1\61\2\0\1\64\1\0\2\64"+
    "\1\0\1\65\1\66\15\0\1\67\11\0\4\70\2\71"+
    "\1\70\1\72\1\70\3\0\2\70\2\0\2\73\1\70"+
    "\13\0\2\70\4\0\2\74\2\0\1\75\27\0\12\20"+
    "\4\0\22\20\16\0\1\22\23\0\1\14\7\12\3\0"+
    "\1\12\2\0\4\12\4\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\2\0\10\12\3\0\1\12\2\0"+
    "\1\12\1\76\2\12\4\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\11\77\3\0\2\77\2\0\2\100"+
    "\1\77\13\0\2\77\12\40\2\0\2\40\2\0\1\40"+
    "\1\0\4\40\4\0\1\40\1\0\1\40\1\0\2\40"+
    "\11\101\3\0\2\101\1\102\1\0\1\101\1\0\4\101"+
    "\4\0\1\101\1\0\1\101\1\0\2\101\1\0\11\103"+
    "\3\0\1\103\2\0\13\103\1\0\4\103\7\43\1\104"+
    "\14\43\1\0\53\43\7\46\1\105\15\46\1\0\52\46"+
    "\2\0\1\52\1\0\2\52\34\0\10\51\3\0\1\51"+
    "\2\0\4\51\4\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\2\51\2\0\1\106\35\0\1\12\1\54\1\55"+
    "\1\107\1\110\4\12\1\0\2\60\2\61\1\60\1\0"+
    "\1\62\1\63\1\12\13\0\1\12\1\61\2\0\1\111"+
    "\36\0\1\112\1\113\15\0\1\112\17\0\11\114\3\0"+
    "\2\114\2\0\2\115\1\114\13\0\2\114\2\0\1\106"+
    "\7\12\3\0\1\12\2\0\4\12\4\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\12\2\0\10\12\3\0"+
    "\1\12\2\0\4\12\4\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0\2\12\4\0\2\116\2\0\1\116\31\0"+
    "\1\66\1\0\2\66\1\0\1\65\1\66\31\0\10\70"+
    "\3\0\1\70\2\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\1\70\1\0\2\70\2\0\1\74\1\0\2\74"+
    "\1\0\1\65\1\74\31\0\1\75\1\0\2\75\2\0"+
    "\1\75\33\0\2\117\70\0\1\120\3\0\10\77\3\0"+
    "\1\77\2\0\4\77\4\0\1\77\1\0\1\77\1\0"+
    "\1\77\1\0\2\77\1\0\1\121\1\106\1\122\1\123"+
    "\13\0\1\121\21\0\1\124\36\0\1\125\1\126\15\0"+
    "\1\125\17\0\2\12\1\111\1\12\1\57\4\12\1\0"+
    "\2\60\2\61\1\60\1\0\2\63\1\12\13\0\1\12"+
    "\1\61\2\0\1\113\35\0\2\12\1\113\6\12\1\0"+
    "\2\60\2\61\1\60\1\0\2\63\1\12\13\0\1\12"+
    "\1\61\2\0\10\114\3\0\1\114\2\0\4\114\4\0"+
    "\1\114\1\0\1\114\1\0\1\114\1\0\2\114\2\0"+
    "\1\116\1\0\2\116\1\0\2\116\31\0\1\117\1\0"+
    "\2\117\34\0\1\127\36\0\1\130\1\131\15\0\1\130"+
    "\17\0\1\12\1\54\1\132\1\12\1\110\4\12\1\0"+
    "\2\60\2\61\1\60\1\0\1\62\1\63\1\12\13\0"+
    "\1\12\1\61\2\0\1\126\35\0\1\12\1\54\1\133"+
    "\6\12\1\0\2\60\2\61\1\60\1\0\1\62\1\63"+
    "\1\12\13\0\1\12\1\61\1\0\1\121\1\106\1\0"+
    "\1\123\13\0\1\121\21\0\1\131\36\0\1\121\1\106"+
    "\15\0\1\121\17\0\1\12\1\54\1\132\1\134\1\110"+
    "\4\12\1\0\2\60\2\61\1\60\1\0\1\62\1\63"+
    "\1\12\13\0\1\12\1\61\1\12\1\54\1\133\1\134"+
    "\1\135\4\12\1\0\2\60\2\61\1\60\1\0\1\62"+
    "\1\63\1\12\13\0\1\12\1\61";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\10\3\0\1\11\1\1\1\11\6\1\1\11"+
    "\3\1\12\11\6\1\1\11\2\1\2\11\1\1\1\0"+
    "\4\1\1\0\1\1\5\0\2\11\2\1\1\0\3\1"+
    "\2\0\1\11\1\0\1\11\2\0\4\1\1\0\1\1"+
    "\1\11\1\0\2\1\1\11\3\0\1\1\1\0\2\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private void retryInState(int newState) {
        yybegin(newState);
        yypushback(yylength());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NeonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { retryInState(DEFAULT);
            } 
            // fall through
          case 34: break;
          case 2: 
            { return NEON_INDENT;
            } 
            // fall through
          case 35: break;
          case 3: 
            { yybegin(IN_LITERAL);
        return NEON_LITERAL;
            } 
            // fall through
          case 36: break;
          case 4: 
            { return NEON_NUMBER;
            } 
            // fall through
          case 37: break;
          case 5: 
            { return NEON_COMMENT;
            } 
            // fall through
          case 38: break;
          case 6: 
            { return NEON_UNKNOWN;
            } 
            // fall through
          case 39: break;
          case 7: 
            { return NEON_WHITESPACE;
            } 
            // fall through
          case 40: break;
          case 8: 
            { return NEON_ARRAY_BULLET;
            } 
            // fall through
          case 41: break;
          case 9: 
            { return NEON_COLON;
            } 
            // fall through
          case 42: break;
          case 10: 
            { yybegin(SINGLE_QUOTED);
    	return NEON_SINGLE_QUOTE_LEFT;
            } 
            // fall through
          case 43: break;
          case 11: 
            { yybegin(DOUBLE_QUOTED);
        return NEON_DOUBLE_QUOTE_LEFT;
            } 
            // fall through
          case 44: break;
          case 12: 
            { return NEON_LPAREN;
            } 
            // fall through
          case 45: break;
          case 13: 
            { return NEON_ITEM_DELIMITER;
            } 
            // fall through
          case 46: break;
          case 14: 
            { return NEON_ASSIGNMENT;
            } 
            // fall through
          case 47: break;
          case 15: 
            { return NEON_RPAREN;
            } 
            // fall through
          case 48: break;
          case 16: 
            { return NEON_LBRACE_CURLY;
            } 
            // fall through
          case 49: break;
          case 17: 
            { return NEON_RBRACE_CURLY;
            } 
            // fall through
          case 50: break;
          case 18: 
            { return NEON_LBRACE_SQUARE;
            } 
            // fall through
          case 51: break;
          case 19: 
            { return NEON_RBRACE_SQUARE;
            } 
            // fall through
          case 52: break;
          case 20: 
            { 
            } 
            // fall through
          case 53: break;
          case 21: 
            { return NEON_STRING;
            } 
            // fall through
          case 54: break;
          case 22: 
            { yybegin(DEFAULT);
		return NEON_SINGLE_QUOTE_RIGHT;
            } 
            // fall through
          case 55: break;
          case 23: 
            { yybegin(DEFAULT);
		return NEON_DOUBLE_QUOTE_RIGHT;
            } 
            // fall through
          case 56: break;
          case 24: 
            { yybegin(DEFAULT);
        return NEON_LITERAL;
            } 
            // fall through
          case 57: break;
          case 25: 
            { yybegin(DEFAULT);
        return NEON_PHP_STATIC_IDENTIFIER;
            } 
            // fall through
          case 58: break;
          case 26: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return NEON_METHOD;
            } 
            // fall through
          case 59: break;
          case 27: 
            { yybegin(IN_LITERAL);
        return NEON_KEY_USAGE;
            } 
            // fall through
          case 60: break;
          case 28: 
            { return NEON_CLASS_NAME;
            } 
            // fall through
          case 61: break;
          case 29: 
            { return NEON_DOUBLE_COLON;
            } 
            // fall through
          case 62: break;
          case 30: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { 
            } 
            // fall through
          case 63: break;
          case 31: 
            { yybegin(IN_LITERAL);
        return NEON_STRING;
            } 
            // fall through
          case 64: break;
          case 32: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(STATIC_FIELD);
        return NEON_DOUBLE_COLON;
            } 
            // fall through
          case 65: break;
          case 33: 
            { yybegin(IN_LITERAL);
        return NEON_PARAMETER_USAGE;
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
